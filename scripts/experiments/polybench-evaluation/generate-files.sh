#!/bin/bash
# Translates polybench files to MLIR, tiles them, applies packing to them, and compiles them. Also compiles them with Polly.

# Gets the location of the script
function getScriptLocation {
    SOURCE="${BASH_SOURCE[0]}"
    while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
        DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
        SOURCE="$(readlink "$SOURCE")"
        [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
        DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
        echo $DIR
}

function Help()
{
   echo "Translates polybench files to MLIR, tiles them, applies packing to them,"
   echo "and compiles them. Also compiles them with Polly"
   echo
   echo "Syntax: $(basename $0) -D DATASET_SIZE -T TILING_METHOD OUTPUT_DIR"
   echo "Options:"
   echo -e "\t-T [METHOD]: Specify tiling method: AffineTiling or Polymer."
   echo -e "\t-D [SIZE]: Specify size of dataset: MINI, SMALL, MEDUIM, LARGE, EXTRALARGE"
   echo -e "\t-h: Print this Help."
   echo -e "\t-v: Verbose mode."
   echo
   echo -e "Tiling sizes generated by default for Polymer are:"
   echo -e "\tMINI:       2  - 8    in increments of 1"
   echo -e "\tSMALL:      2  - 32   in increments of 1"
   echo -e "\tMEDIUM:     4  - 128  in increments of 1"
   echo -e "\tLARGE:      8  - 512  in increments of 2"
   echo -e "\tEXTRALARGE: 16 - 1024 in increments of 4"
   echo
   echo -e "Tiling sizes generated by default for AffineTiling are:"
   echo -e "\t Cache of size L1 (defined in spec.file)"
   echo -e "\t Cache of size L2 (defined in spec.file)"
   echo -e "\t Cache of size L3 (defined in spec.file)"
}

function sourceConfigFile() {
  # Gets this script path.
  scriptPath=$(getScriptLocation)
  configFilePath="$scriptPath/../../config.file"
  # Checks the config.file
  if [ ! -f $configFilePath ]
  then
      echo "Please create config.file"
      Help
      exit 2
  fi
  source $configFilePath
}

function sourceSpecFile() {
  # Gets this script path.
  scriptPath=$(getScriptLocation)
  specFilePath="$scriptPath/../spec.file"
  # Checks the spec.file
  if [ ! -f $specFilePath ]
  then
      echo "Please create spec.file"
      Help
      exit 2
  fi
  source $specFilePath
}

function checkSpecs() {
  if [[ -z $L1 ]]; then
    echo "L1 size not defined"
    exit 1
  fi

  if [[ -z $L2 ]]; then
    echo "L2 size not defined"
    exit 1
  fi

  if [[ -z $L3 ]]; then
    echo "L3 size not defined"
    exit 1
  fi

  if [[ -z $L1_ASSOCIATIVITY ]]; then
    echo "L1 associativity not defined"
    exit 1
  fi

  if [[ -z $L2_ASSOCIATIVITY ]]; then
    echo "L2 associativity not defined"
    exit 1
  fi

  if [[ -z $CACHE_LINE ]]; then
    echo "Cache line size not defined"
    exit 1
  fi

  if [[ -z $DTLB_ENTRY ]]; then
    echo "Number of dtlb entries not defined"
    exit 1
  fi

  if [[ -z $DTLB_PAGE ]]; then
    echo "Page size not defined"
    exit 1
  fi

  if [[ -z $POLLY_ENABLE_PATTERN_MATCHING ]]; then
    echo "Polly enable pattern matching not defined"
    exit 1
  fi

  if [[ -z $LLVM_DISABLE_VECTORIZATION ]]; then
    echo "LLVM disable vectorization not defined"
    exit 1
  fi

  if [[ -z $LLVM_DISABLE_UNROLLING ]]; then
    echo "LLVM disable unrolling not defined"
    exit 1
  fi
}

function checkDependencies() {
  # Check clang ahead, otherwise only checked in lowering
  if [[ -z $CLANG || ! -f $CLANG ]]; then
    echo "clang not found!"
    exit 1
  fi
}

function checkClangVersion() {
  if [[ -z $CLANG_VERSION ]]; then
    echo "Clang version not defined!"
    exit 1
  fi

  # Check clang version
  $CLANG --version | grep -q --fixed-strings $CLANG_VERSION
  if [[ $? -ne 0 ]]; then
    echo "Incorrect clang version, please set it up according to the config.file"
    echo "Corrent version is $CLANG_VERSION"
    exit 1
  fi
}

RED="\033[0;91m"
GREEN="\033[0;92m"
YEL="\033[0;93m"
CLR="\033[0m"

function echoRed() {
  echo -e "$RED$1$CLR"
}

function echoGreen() {
  echo -e "$GREEN$1$CLR"
}

function echoYellow() {
  echo -e "$YEL$1$CLR"
}

DATASET_SIZE=""
TILING_METHOD=""

while getopts ":hvD:T:" option; do
  case $option in
    h)
      Help
      exit 0
      ;;
    v)
      set -x
      ;;
    D)
      DATASET_SIZE=${OPTARG}
    ;;
    T)
      TILING_METHOD=${OPTARG}
      ;;
    \?)
      echo "Invalid option." >&2
      Help
      exit 1
      ;;
  esac
done

# Gets the last argument and checks if it is a directory.
OUTPUT_DIR=${BASH_ARGV[0]}
if [[ ! -d $OUTPUT_DIR ]] || [[ -z $OUTPUT_DIR ]]; then
    echo "ERROR: Output path is empty or isn't a directory."
    Help
    exit 1
fi
OUTPUT_DIR=$(realpath $OUTPUT_DIR)

# Check dataset size
case $DATASET_SIZE in
  (MINI|SMALL|MEDIUM|LARGE|EXTRALARGE)
  ;;
  *)
    echo "Please choose a valid dataset size selection"
    echo "Use MINI, SMALL, MEDIUM, LARGE, or EXTRALARGE"
    exit 1
  ;;
esac

# Check tiling method
case $TILING_METHOD in
  (AffineTiling|Polymer)
  ;;
  *)
    echo "Please choose a valid tiling method"
    echo "Use AffineTiling or Polymer"
    exit 1
  ;;
esac

# Source config and spec, check dependencies, and check clang version
sourceConfigFile
sourceSpecFile
checkSpecs
checkDependencies
checkClangVersion

POLYGEIST_SH="$scriptPath/../../polygeist/polygeist.sh"
if [ ! -f $POLYGEIST_SH ]; then
  echo "polygeist.sh not found!"
  exit 1
fi
POLYGEIST_SH=$(realpath $POLYGEIST_SH)

POLYMER_SH="$scriptPath/../../polymer/polymer.sh"
if [ ! -f $POLYMER_SH ]; then
  echo "polymer.sh not found!"
  exit 1
fi
POLYMER_SH=$(realpath $POLYMER_SH)

MLIR_PACKING_SH="$scriptPath/../../mlir-packing/mlir-packing.sh"
if [ ! -f $MLIR_PACKING_SH ]; then
  echo "mlir-packing.sh not found!"
  exit 1
fi
MLIR_PACKING_SH=$(realpath $MLIR_PACKING_SH)

MLIR_PLUS_PACKING_SH="$scriptPath/../../mlir-plus-packing/mlir-plus-packing.sh"
if [ ! -f $MLIR_PLUS_PACKING_SH ]; then
  echo "mlir-plus-packing.sh not found!"
  exit 1
fi
MLIR_PLUS_PACKING_SH=$(realpath $MLIR_PLUS_PACKING_SH)

LOWER_BIN_SH="$scriptPath/../../lower-to-binary/lower-to-binary.sh"
if [ ! -f $LOWER_BIN_SH ]; then
  echo "lower-to-binary.sh not found!"
  exit 1
fi
LOWER_BIN_SH=$(realpath $LOWER_BIN_SH)

LOWER_BIN_PLUS_SH="$scriptPath/../../lower-to-binary-plus/lower-to-binary-plus.sh"
if [ ! -f $LOWER_BIN_PLUS_SH ]; then
  echo "lower-to-binary-plus.sh not found!"
  exit 1
fi
LOWER_BIN_PLUS_SH=$(realpath $LOWER_BIN_PLUS_SH)

POLLY_SH="$scriptPath/../../polly/polly.sh"
if [ ! -f $POLLY_SH ]; then
  echo "polly.sh not found!"
  exit 1
fi
POLLY_SH=$(realpath $POLLY_SH)

AFFINE_TILING_SH="$scriptPath/../../affine-tiling/affine-tiling.sh"
if [ ! -f $AFFINE_TILING_SH ]; then
  echo "affine-tiling.sh not found!"
  exit 1
fi
AFFINE_TILING_SH=$(realpath $AFFINE_TILING_SH)

AFFINE_TILING_PLUS_SH="$scriptPath/../../affine-tiling-plus/affine-tiling-plus.sh"
if [ ! -f $AFFINE_TILING_PLUS_SH ]; then
  echo "affine-tiling-plus.sh not found!"
  exit 1
fi
AFFINE_TILING_PLUS_SH=$(realpath $AFFINE_TILING_PLUS_SH)

cd $OUTPUT_DIR

# Generate polygeist mlir files ----------------------------------
POLYGEIST_OUT="$OUTPUT_DIR/polygeist-mlir"
mkdir $POLYGEIST_OUT
$POLYGEIST_SH -D $DATASET_SIZE $POLYGEIST_OUT
# ----------------------------------------------------------------

if [ "$TILING_METHOD" == "Polymer" ]; then

  case $DATASET_SIZE in
    MINI)
      INCREMENT="1"
      FIRST_SIZE="2"
      LAST_SIZE="8"
    ;;
    SMALL)
      INCREMENT="1"
      FIRST_SIZE="2"
      LAST_SIZE="32"
    ;;
    MEDIUM)
      INCREMENT="1"
      FIRST_SIZE="4"
      LAST_SIZE="128"
    ;;
    LARGE)
      INCREMENT="2"
      FIRST_SIZE="8"
      LAST_SIZE="512"
    ;;
    EXTRALARGE)
      INCREMENT="4"
      FIRST_SIZE="16"
      LAST_SIZE="1024"
    ;;
    *)
      echo "Not a valid tile size selection. Use MINI, SMALL, MEDIUM, LARGE, EXTRALARGE."
      exit 1
    ;;
  esac

  # Generate polymer mlir files ------------------------------------
  for tile in $(seq $FIRST_SIZE $INCREMENT $LAST_SIZE); do
    echoGreen "\nPOLYMER: TILE $tile"
    POLYMER_OUT="$OUTPUT_DIR/polymer-$tile-mlir"
    mkdir $POLYMER_OUT
    # set tile sizes
    echo -e "$tile\n$tile\n$tile\n$tile\n$tile\n$tile\n" > "$POLYMER_OUT/tile.sizes"
    $POLYMER_SH $POLYGEIST_OUT $POLYMER_OUT
  done
  # ----------------------------------------------------------------

  # Generate packings for polymer mlir files------------------------
  for tiling_out in $(find $OUTPUT_DIR -type d -name "polymer-[0-9]*-mlir" | sort); do
    tile_size=$(basename $tiling_out | cut -d '-' -f 2)
    echoGreen "\nPACKING: TILE $tile_size"
    PACKING_OUT="$OUTPUT_DIR/polymer-packing-${tile_size}-mlir"
    mkdir $PACKING_OUT
    $MLIR_PACKING_SH --l1 $L1 --l2 $L2 --l3 $L3 \
                     --cache-line $CACHE_LINE \
                     --dtlb-entries $DTLB_ENTRY \
                     --dtlb-page $DTLB_PAGE \
                     $tiling_out $PACKING_OUT
  done
  # ----------------------------------------------------------------

else

  # Generate affine tiling mlir files-------------------------------
  echoGreen "\nAFFINE TILING: l1"
  AFFINE_TILING_L1_OUT="$OUTPUT_DIR/affine-tiling-l1-mlir"
  mkdir $AFFINE_TILING_L1_OUT
  $AFFINE_TILING_SH -c $L1 $POLYGEIST_OUT $AFFINE_TILING_L1_OUT
  
  echoGreen "\nAFFINE TILING: l2"
  AFFINE_TILING_L2_OUT="$OUTPUT_DIR/affine-tiling-l2-mlir"
  mkdir $AFFINE_TILING_L2_OUT
  $AFFINE_TILING_SH -c $L2 $POLYGEIST_OUT $AFFINE_TILING_L2_OUT

  echoGreen "\nAFFINE TILING: l3"
  AFFINE_TILING_L3_OUT="$OUTPUT_DIR/affine-tiling-l3-mlir"
  mkdir $AFFINE_TILING_L3_OUT
  $AFFINE_TILING_SH -c $L3 $POLYGEIST_OUT $AFFINE_TILING_L3_OUT
  # ----------------------------------------------------------------

  # Generate affine tiling mlir plus files-------------------------------
  echoGreen "\nAFFINE TILING PLUS: l1"
  AFFINE_TILING_PLUS_L1_OUT="$OUTPUT_DIR/affine-tiling-l1-mlir-plus"
  mkdir $AFFINE_TILING_PLUS_L1_OUT
  $AFFINE_TILING_PLUS_SH -c $L1 $POLYGEIST_OUT $AFFINE_TILING_PLUS_L1_OUT

  echoGreen "\nAFFINE TILING PLUS: l2"
  AFFINE_TILING_L2_OUT="$OUTPUT_DIR/affine-tiling-l2-mlir-plus"
  mkdir $AFFINE_TILING_L2_OUT
  $AFFINE_TILING_PLUS_SH -c $L2 $POLYGEIST_OUT $AFFINE_TILING_L2_OUT

  echoGreen "\nAFFINE TILING PLUS: l3"
  AFFINE_TILING_L3_OUT="$OUTPUT_DIR/affine-tiling-l3-mlir-plus"
  mkdir $AFFINE_TILING_L3_OUT
  $AFFINE_TILING_PLUS_SH -c $L3 $POLYGEIST_OUT $AFFINE_TILING_L3_OUT
  # ----------------------------------------------------------------

  # Generate packings for affine tiling mlir files------------------
  for tiling_out in $(find $OUTPUT_DIR -type d -name "affine-tiling-l[0-9]-mlir" | sort); do
    cache=$(basename $tiling_out | cut -d '-' -f 3)
    echoGreen "\nPACKING: $cache"
    PACKING_OUT="$OUTPUT_DIR/affine-tiling-${cache}-packing-mlir"
    mkdir $PACKING_OUT
    $MLIR_PACKING_SH --l1 $L1 --l2 $L2 --l3 $L3 \
                     --cache-line $CACHE_LINE \
                     --dtlb-entries $DTLB_ENTRY \
                     --dtlb-page $DTLB_PAGE \
                     $tiling_out $PACKING_OUT
  done

  # Generate packings for affine tiling mlir-plus files------------------
  for tiling_out in $(find $OUTPUT_DIR -type d -name "affine-tiling-l[0-9]-mlir-plus" | sort); do
    cache=$(basename $tiling_out | cut -d '-' -f 3)
    echoGreen "\nPACKING PLUS: $cache"
    PACKING_PLUS_OUT="$OUTPUT_DIR/affine-tiling-${cache}-packing-mlir-plus"
    mkdir $PACKING_PLUS_OUT
    $MLIR_PLUS_PACKING_SH --l1 $L1 --l2 $L2 --l3 $L3 \
                          --cache-line $CACHE_LINE \
                          --dtlb-entries $DTLB_ENTRY \
                          --dtlb-page $DTLB_PAGE \
                          $tiling_out $PACKING_PLUS_OUT
  done
  # ----------------------------------------------------------------

fi

cd $OUTPUT_DIR
PACKED_BENCHMARKS="$OUTPUT_DIR/packed-benchmarks.txt"

# Get list of benchmarks that were packed by looking at the logs
echo $(for i in $(grep -rl "Succeeded generating packing" | sort | uniq); do
         echo $(basename ${i%.*})
       done | sort | uniq) > $PACKED_BENCHMARKS

# Delete mlir files benchmarks that are not in packed-benchmarks list
for i in $(find -type f -name "*.mlir"); do
  grep -q $(basename ${i%.*}) $PACKED_BENCHMARKS
  if [ "$?" -eq "1" ]; then
    rm $i
  fi
done

cd $OUTPUT_DIR
PACKED_FILES="$OUTPUT_DIR/packed-files.txt"

# Get list of tilings of benchmarks that were packed by looking at the logs
grep -rl "Succeeded generating packing" | sort | uniq | cut -d'/' -f1,3 | sed 's/.log/.mlir/' > $PACKED_FILES

if [ "$TILING_METHOD" == "Polymer" ]; then
  # Delete mlir packing files that are not in packed-files list
  for i in $(find -type f -path "*polymer-packing-[0-9]*-mlir/*.mlir" | sed 's/.\///'); do
    grep -q $i $PACKED_FILES
    if [ "$?" -eq "1" ]; then
      rm $i
    fi
  done
else
  # Delete mlir plus packing files that are not in packed-files list
  for i in $(find -type f -path "*affine-tiling-l[0-9]-packing-mlir-plus/*.mlir" | sed 's/.\///'); do
    grep -q $i $PACKED_FILES
    if [ "$?" -eq "1" ]; then
      rm $i
    fi
  done

  # Get list of the tiling files that were not packed
  PACKED_TILING_FILES="$OUTPUT_DIR/packed-tiling-files.txt"
  cat $PACKED_FILES | sed "s/-packing//" > $PACKED_TILING_FILES
  # Delete mlir plus tiling files that were not packed
  for i in $(find -type f -path "*affine-tiling-l[0-9]-mlir-plus/*.mlir" | sed 's/.\///'); do
    grep -q $i $PACKED_TILING_FILES
    if [ "$?" -eq "1" ]; then
      rm $i
    fi
  done
fi

FLAGS=""
if [[ $LLVM_DISABLE_VECTORIZATION == "true" ]]; then
  FLAGS="$FLAGS --disable-vectorization"
fi
if [[ $LLVM_DISABLE_UNROLLING == "true" ]]; then
  FLAGS="$FLAGS --disable-unrolling"
fi

# Compile polly executables --------------------------------------
POLLY_BIN="$OUTPUT_DIR/polly-bin"
mkdir $POLLY_BIN
POLLY_FLAGS=""

if [[ $POLLY_ENABLE_PATTERN_MATCHING == "true" ]]; then
  POLLY_FLAGS="--enable-pattern-matching"
fi

echoGreen "\nCOMPILE POLLY"
$POLLY_SH -D $DATASET_SIZE --l1 $L1 --l2 $L2 \
          --l1-associativity $L1_ASSOCIATIVITY \
          --l2-associativity $L2_ASSOCIATIVITY \
          $POLLY_FLAGS $FLAGS $POLLY_BIN
# ----------------------------------------------------------------

# Compile polygeist executables ----------------------------------
POLYGEIST_OUT="$OUTPUT_DIR/polygeist-mlir"
POLYGEIST_BIN="$OUTPUT_DIR/polygeist-bin"
mkdir $POLYGEIST_BIN
echoGreen "\nCOMPILE POLYGEIST"
$LOWER_BIN_SH -D $DATASET_SIZE $FLAGS $POLYGEIST_OUT $POLYGEIST_BIN
rm -r $POLYGEIST_BIN/tmp
# ----------------------------------------------------------------

if [ $TILING_METHOD == "Polymer" ]; then

  # Compile polymer executables ------------------------------------
  for tile in $(seq $FIRST_SIZE $INCREMENT $LAST_SIZE); do
    echoGreen "\nCOMPILE POLYMER: TILE $tile"
    POLYMER_OUT="$OUTPUT_DIR/polymer-$tile-mlir"
    POLYMER_BIN="$OUTPUT_DIR/polymer-$tile-bin"
    mkdir $POLYMER_BIN
    $LOWER_BIN_SH -D $DATASET_SIZE $FLAGS $POLYMER_OUT $POLYMER_BIN
    rm -r $POLYMER_BIN/tmp
  done
  # ----------------------------------------------------------------

  # Compile polymer packing executables ----------------------------
  for POLYMER_OUT in $(find $OUTPUT_DIR -type d -name "polymer-[0-9]*-mlir" | sort); do
    tile_size=$(basename $POLYMER_OUT | cut -d '-' -f 2)
    echoGreen "\nCOMPILE PACKING: TILE $tile_size"
    PACKING_OUT="$OUTPUT_DIR/polymer-packing-${tile_size}-mlir"
    PACKING_BIN="$OUTPUT_DIR/polymer-packing-${tile_size}-bin"
    mkdir $PACKING_BIN
    $LOWER_BIN_SH -D $DATASET_SIZE $FLAGS $PACKING_OUT $PACKING_BIN
    rm -r $PACKING_BIN/tmp
  done
  # ----------------------------------------------------------------

else

  AFFINE_TILING_L1_OUT="$OUTPUT_DIR/affine-tiling-l1-mlir"
  AFFINE_TILING_L2_OUT="$OUTPUT_DIR/affine-tiling-l2-mlir"
  AFFINE_TILING_L3_OUT="$OUTPUT_DIR/affine-tiling-l3-mlir"

  # Compile affine tiling executables ------------------------------
  AFFINE_TILING_L1_BIN="$OUTPUT_DIR/affine-tiling-l1-bin"
  AFFINE_TILING_L2_BIN="$OUTPUT_DIR/affine-tiling-l2-bin"
  AFFINE_TILING_L3_BIN="$OUTPUT_DIR/affine-tiling-l3-bin"
  
  mkdir $AFFINE_TILING_L1_BIN
  mkdir $AFFINE_TILING_L2_BIN
  mkdir $AFFINE_TILING_L3_BIN

  echoGreen "\nCOMPILE AFFINE TILING: l1"
  $LOWER_BIN_SH -D $DATASET_SIZE $FLAGS $AFFINE_TILING_L1_OUT $AFFINE_TILING_L1_BIN
  echoGreen "\nCOMPILE AFFINE TILING: l2"
  $LOWER_BIN_SH -D $DATASET_SIZE $FLAGS $AFFINE_TILING_L2_OUT $AFFINE_TILING_L2_BIN
  echoGreen "\nCOMPILE AFFINE TILING: l3"
  $LOWER_BIN_SH -D $DATASET_SIZE $FLAGS $AFFINE_TILING_L3_OUT $AFFINE_TILING_L3_BIN

  rm -r $AFFINE_TILING_L1_BIN/tmp
  rm -r $AFFINE_TILING_L2_BIN/tmp
  rm -r $AFFINE_TILING_L3_BIN/tmp
  # ----------------------------------------------------------------

  # Compile affine tiling packing executables ----------------------
  for packing_out in $(find $OUTPUT_DIR -type d -name "affine-tiling-l[0-9]-packing-mlir" | sort); do
    packing_bin=$(basename $packing_out | sed "s/mlir/bin/")
    mkdir $packing_bin
    echoGreen "\nCOMPILE AFFINE PACKING: $(echo $packing_out | grep -o 'l[0-9]')"
    $LOWER_BIN_SH -D $DATASET_SIZE $FLAGS $packing_out $packing_bin
    rm -r $packing_bin/tmp
  done
  # ----------------------------------------------------------------

  # Compile affine tiling packing plus executables ----------------------
  for packing_out in $(find $OUTPUT_DIR -type d -name "affine-tiling-l[0-9]-packing-mlir-plus" | sort); do
    packing_bin=$(basename $packing_out | sed "s/mlir/bin/")
    mkdir $packing_bin
    echoGreen "\nCOMPILE AFFINE PACKING PLUS: $(echo $packing_out | grep -o 'l[0-9]')"
    $LOWER_BIN_PLUS_SH -D $DATASET_SIZE $FLAGS $packing_out $packing_bin
    rm -r $packing_bin/tmp
  done
  # ----------------------------------------------------------------

fi

# Delete executable files benchmarks that are not in packed-benchmarks list
for i in $(find -type f -name "*.exe"); do
  grep -q $(basename ${i%.*}) $PACKED_BENCHMARKS
  if [ "$?" -eq "1" ]; then
    rm $i
  fi
done
